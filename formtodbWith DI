<?php

namespace Drupal\staff_info_form\Form;
use Drupal\Core\Database\Connection;
use Symfony\Component\DependencyInjection\ContainerInterface;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Database;

class StaffInfoForm extends FormBase {



protected $database;

public function __construct(Connection $database){
    $this->database=$database;
}

public static function create(ContainerInterface $container){
    return new static (
        $container->get('database'),
    );
}


  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'staff_info_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $form['name'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Name'),
      '#required' => TRUE,
    ];

    $form['email'] = [
      '#type' => 'email',
      '#title' => 'Email',
      '#required' => TRUE,
    ];

    $form['phone'] = [
      '#type' => 'tel',
      '#title' => $this->t('Phone'),
      '#required' => TRUE,
    ];

    $form['salary'] = [
      '#type' => 'number',
      '#title' => $this->t('Salary'),
      '#required' => TRUE,
    ];

    $form['expected_value'] = [
      '#type' => 'number',
      '#title' => $this->t('Expected Value'),
      '#required' => TRUE,
    ];

    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Submit'),
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    // Custom validation for the name field
    $name = $form_state->getValue('name');
    if (strlen($name) < 10) {
      $form_state->setErrorByName('name', $this->t('The name must be at least 10 characters long.'));
    }
  
    // Custom validation for duplicate email and phone
    $email = $form_state->getValue('email');
    $phone = $form_state->getValue('phone');
    // $connection = Database::getConnection();
  
    // Combined query to check for duplicate email and phone
    $query = $this->database->select('staff_info', 'si')
      ->fields('si', ['email', 'phone'])
      ->condition('email', $email)
      ->condition('phone', $phone, 'OR')
      ->execute();
//   dpm($query);
    foreach ($query as $record) {
        // dpm($record);
      if ($record->email === $email) {
        $form_state->setErrorByName('email', $this->t('The email address is already in use.'));
      }
      if ($record->phone === $phone) {
        $form_state->setErrorByName('phone', $this->t('The phone number is already in use.'));
      }
    }
  }
  
  
  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // $connection = Database::getConnection();
    $this->database->insert('staff_info')
      ->fields([
        'name' => $form_state->getValue('name'),
        'email' => $form_state->getValue('email'),
        'phone' => $form_state->getValue('phone'),
        'salary' => $form_state->getValue('salary'),
        'expected_value' => $form_state->getValue('expected_value'),
      ])
      ->execute();

    \Drupal::messenger()->addMessage($this->t('Staff information has been saved.'));
  }
}
